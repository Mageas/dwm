Notes:
All my configuration is in this file

Configuration of the following patches:
 * fakefullscreen
 * focusonclick
 * fullgaps
 * movestack
--- a/config.def.h
+++ b/config.def.h
@@ -1,116 +1,127 @@
 /* See LICENSE file for copyright and license details. */

 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 3;        /* border pixel of windows */
+static const unsigned int gappx     = 10;       /* gaps between windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
+static const int focusonwheel       = 0;
+static const char *fonts[]          = { "FreeMono:style=Regular:size=12", "Hack Nerd Font:style=Regular:size=10" };
+static const char dmenufont[]       = "FreeMono:style=Regular:size=12";
+static const char col_bg_focused[]    = "#ffb86c"; // Background focused
+static const char col_bg_unfocused[]  = "#44475a"; // Background unfocused
+static const char col_fg_focused[]    = "#282a36"; // Foreground focused
+static const char col_fg_unfocused[]  = "#bdcaf0"; // Foreground unfocused
+static const char col_bd_focused[]    = "#ffb86c"; // Border focused
+static const char col_bd_unfocused[]  = "#44475a"; // Border unfocused
 static const char *colors[][3]      = {
-	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+    /*                    fg                    bg                  border   */
+    [SchemeNorm]        = { col_fg_unfocused,   col_bg_unfocused,   col_bd_unfocused },
+    [SchemeSel]         = { col_fg_focused,     col_bg_focused,     col_bd_focused  },
 };

 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };

 static const Rule rules[] = {
-	/* xprop(1):
-	 *	WM_CLASS(STRING) = instance, class
-	 *	WM_NAME(STRING) = title
-	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+    /* xprop(1):
+     *	WM_CLASS(STRING) = instance, class
+     *	WM_NAME(STRING) = title
+     */
+    /* class            instance       title        tags mask     isfloating   monitor */
+    { "Brave-browser",  NULL,          NULL,        1,            0,           1 },
+    { "discord",        NULL,          NULL,        1,            0,           0 },
+    { "Pavucontrol",    NULL,          NULL,        0,            1,           -1 },
+    { "Tor Browser",    NULL,          NULL,        0,            1,           -1 },
 };

 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
 static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
-static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
+static const int lockfullscreen = 0; /* 1 will force focus on the fullscreen window */

 static const Layout layouts[] = {
-	/* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
+    /* symbol     arrange function */
+    { "[]=",      tile },    /* first entry is default */
+    { "[M]",      monocle },
+    { NULL,       NULL },    /* no layout function means floating behavior */
 };

 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
-	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
-	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+    { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+    { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+    { MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+    { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

-/* commands */
-static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
-
 static Key keys[] = {
-	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
-	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
-	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
-	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
-	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                       XK_space,  setlayout,      {0} },
-	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	TAGKEYS(                        XK_1,                      0)
-	TAGKEYS(                        XK_2,                      1)
-	TAGKEYS(                        XK_3,                      2)
-	TAGKEYS(                        XK_4,                      3)
-	TAGKEYS(                        XK_5,                      4)
-	TAGKEYS(                        XK_6,                      5)
-	TAGKEYS(                        XK_7,                      6)
-	TAGKEYS(                        XK_8,                      7)
-	TAGKEYS(                        XK_9,                      8)
-	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+    /* modifier                     key        function        argument */
+    // TAGS
+    TAGKEYS(                        XK_1,                            0)
+    TAGKEYS(                        XK_2,                            1)
+    TAGKEYS(                        XK_3,                            2)
+    TAGKEYS(                        XK_4,                            3)
+    TAGKEYS(                        XK_5,                            4)
+    TAGKEYS(                        XK_6,                            5)
+    TAGKEYS(                        XK_7,                            6)
+    TAGKEYS(                        XK_8,                            7)
+    TAGKEYS(                        XK_9,                            8)
+    { MODKEY,                       XK_Tab,          view,           {0} },
+    { MODKEY,                       XK_0,            view,           {.ui = ~0 } },
+    { MODKEY|ShiftMask,             XK_0,            tag,            {.ui = ~0 } },
+    { MODKEY,                       XK_q,            killclient,     {0} },
+    // DWM
+    { MODKEY|ShiftMask,             XK_Escape,       quit,           {0} },
+    { MODKEY|ControlMask,           XK_Return,       zoom,           {0} },
+    // DWM KEYBINDINGS
+    { MODKEY|ShiftMask,             XK_l,            spawn,          SHCMD("slock") },
+    { MODKEY,                       XK_d,            spawn,          SHCMD("dmenu_run -i -hp virt-manager") },
+    { MODKEY,                       XK_Return,       spawn,          SHCMD("alacritty") },
+    // FACTOR
+    { MODKEY,                       XK_l,            setmfact,       {.f = +0.05} },
+    { MODKEY,                       XK_h,            setmfact,       {.f = -0.05} },
+    // MASTER/STACK
+    { MODKEY,                       XK_i,            incnmaster,     {.i = +1 } },
+    { MODKEY,                       XK_u,            incnmaster,     {.i = -1 } },
+    { MODKEY,                       XK_j,            focusstack,     {.i = +1 } },
+    { MODKEY,                       XK_k,            focusstack,     {.i = -1 } },
+    // STACK
+    { MODKEY|ShiftMask,             XK_j,            movestack,      {.i = +1 } },
+    { MODKEY|ShiftMask,             XK_k,            movestack,      {.i = -1 } },
+    // LAYOUTS
+    { MODKEY,                       XK_t,            setlayout,      {.v = &layouts[0]} },
+    { MODKEY,                       XK_m,            setlayout,      {.v = &layouts[1]} },
+    { MODKEY|ShiftMask,             XK_space,        setlayout,      {0} },
+    { MODKEY,                       XK_space,        togglefloating, {0} },
+    // MONITORS
+    { MODKEY,                       XK_comma,        focusmon,       {.i = -1 } },
+    { MODKEY,                       XK_period,       focusmon,       {.i = +1 } },
+    { MODKEY|ShiftMask,             XK_comma,        tagmon,         {.i = -1 } },
+    { MODKEY|ShiftMask,             XK_period,       tagmon,         {.i = +1 } },
+    // BAR
+    { MODKEY,                       XK_b,            togglebar,      {0} },
 };

 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
 static Button buttons[] = {
-	/* click                event mask      button          function        argument */
-	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
-	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
-	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
-	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
-	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
-	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
-	{ ClkTagBar,            0,              Button1,        view,           {0} },
-	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
-	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+    /* click                event mask      button          function        argument */
+    { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
+    { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+    { ClkWinTitle,          0,              Button2,        zoom,           {0} },
+    { ClkStatusText,        0,              Button2,        spawn,          SHCMD("alacritty") },
+    { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
+    { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
+    { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
+    { ClkTagBar,            0,              Button1,        view,           {0} },
+    { ClkTagBar,            0,              Button3,        toggleview,     {0} },
+    { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
+    { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 };

--- a/dwm.c
+++ b/dwm.c
@@ -1640,8 +1640,6 @@ sigchld(int unused)
 void
 spawn(const Arg *arg)
 {
-	if (arg->v == dmenucmd)
-		dmenumon[0] = '0' + selmon->num;
 	if (fork() == 0) {
 		if (dpy)
 			close(ConnectionNumber(dpy));
